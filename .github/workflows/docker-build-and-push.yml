on:
  workflow_call:
    inputs:
      disable-sudo:
        type: boolean
        default: true
      dockerfile:
        type: string
        default: "Dockerfile"
      egress-policy-allowlist:
        type: string
        default: ""
      flavor:
        type: string
        description: "Defines a global behavior for tags"
        default: |
          latest=auto
          prefix=
          suffix=
      image:
        required: true
        type: string
      platforms:
        type: string
        default: "linux/amd64,linux/arm64"
      push:
        type: boolean
        default: false
      registry:
        type: string
        default: ""
      runs-on:
        type: string
        default: "ubuntu-latest"
      tags:
        type: string
        default: |
          type=schedule
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
      upload-sarif:
        type: boolean
        default: true
      working-directory:
        type: string
        default: "."
    secrets:
      registry-username:
        required: true
      registry-password:
        required: true

jobs:
  build-and-push-image:
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write
      security-events: write
    name: Docker build and push
    runs-on: ${{ inputs.runs-on }}
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911
        # v2.13.0
        with:
          disable-sudo: false
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            auth.docker.io:443
            download.docker.com:443
            fulcio.sigstore.dev:443
            ghcr.io:443
            github.com:443
            mirror.gcr.io:443
            objects.githubusercontent.com:443
            pkg-containers.githubusercontent.com:443
            production.cloudflare.docker.com:443
            raw.githubusercontent.com:443
            registry-1.docker.io:443
            rekor.sigstore.dev:443
            release-assets.githubusercontent.com:443
            ${{ inputs.egress-policy-allowlist }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        # v5.0.0
        with:
          persist-credentials: false
      - name: Set up Docker
        uses: docker/setup-docker-action@b60f85385d03ac8acfca6d9996982511d8620a19
        # v4.3.0
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }
      - uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392
        # v3.6.0
      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
        # v3.11.1
        with:
          cache-binary: false
      - name: Log in to the Container registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1
        # v3.5.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.registry-username }}
          password: ${{ secrets.registry-password }}
      - name: Extract metadata (tags, labels) for Docker
        id: metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f
        # v5.8.0
        with:
          images: ${{ inputs.registry }}/${{ inputs.image }}
          tags: ${{ inputs.tags }}
          flavor: ${{ inputs.flavor }}
      - name: Build and push (load locally)
        id: build
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        # v6.18.0
        with:
          annotations: ${{ steps.metadata.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: ${{ inputs.working-directory }}
          file: ${{ inputs.working-directory }}/${{ inputs.dockerfile }}
          labels: ${{ steps.metadata.outputs.labels }}
          platforms: ${{ inputs.platforms }}
          load: true
          provenance: mode=max
          push: ${{ inputs.push }}
          tags: ${{ steps.metadata.outputs.tags }}
      - name: Generate artifact attestation
        if: inputs.push
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be
        # v2.4.0
        with:
          subject-name: ${{ inputs.registry }}/${{ inputs.image }}
          subject-digest: ${{ steps.build.outputs.imageid }}
          push-to-registry: true
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4
        # v0.32.0
        with:
          format: sarif
          ignore-unfixed: true
          image-ref: ${{ steps.build.outputs.imageid }}
          output: ${{ inputs.working-directory }}/trivy_results.sarif
          github-pat: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload results
        uses: github/codeql-action/upload-sarif@3407610120cd5656b6fc71991415cb50748b9489
        # v2.20.1
        with:
          sarif_file: ${{ inputs.working-directory }}/trivy_results.sarif
          category: container-security
        if: ${{ inputs.upload-sarif }}

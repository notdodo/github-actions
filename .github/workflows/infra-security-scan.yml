on:
  workflow_call:
    inputs:
      disable-sudo:
        type: boolean
        default: true
      egress-policy-allowlist:
        type: string
        default: ""
      enable-comments:
        type: boolean
        default: true
      runs-on:
        type: string
        default: "ubuntu-latest"
      upload-sarif:
        type: boolean
        default: true
      working-directory:
        type: string
        default: "."

jobs:
  infra-security-scan:
    name: Scan with Kics
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911
        # v2.13.0
        with:
          disable-sudo: ${{ inputs.disable-sudo }}
          egress-policy: block
          allowed-endpoints: >
            9236a389bd48b984df91adc1bc924620.r2.cloudflarestorage.com:443
            api.github.com:443
            apk.cgr.dev:443
            github.com:443
            kics.io:443
            packages.wolfi.dev:443
            registry.npmjs.org:443
            ${{ inputs.egress-policy-allowlist }}
      - name: Checkout Source
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        # v4.2.2
        with:
          persist-credentials: false
      - name: Kics Scan
        uses: Checkmarx/kics-github-action@3545b741daf8fc816b081261995184aa12a247c0
        # v2.1.11
        with:
          path: .
          output_path: ${{ inputs.working-directory }}/kics_results.sarif
          output_formats: sarif
          fail_on: high,medium
          token: ${{ github.token }}
          enable_comments: ${{ inputs.enable-comments }}
          enable_annotations: true
          enable_jobs_summary: true
          comments_with_queries: true
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@3407610120cd5656b6fc71991415cb50748b9489
        # v2.20.1
        with:
          sarif_file: ${{ inputs.working-directory }}/kics_results.sarif
          category: devops
        if: ${{ inputs.upload-sarif }}

  zizmor:
    name: zizmor GitHub Actions Security Analysis
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911
        # v2.13.0
        with:
          disable-sudo-and-containers: ${{ inputs.disable-sudo }}
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            objects.githubusercontent.com:443
            pypi.org:443
            raw.githubusercontent.com:443
            release-assets.githubusercontent.com:443
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        # v4.2.2
        with:
          persist-credentials: false
      - name: Install the latest version of uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc
        # v6.4.3
      - name: Run zizmor üåà
        run: |
          wget https://raw.githubusercontent.com/notdodo/github-actions/refs/heads/main/zizmor.yml
          uvx zizmor --format sarif . > zizmor_results.sarif
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@3407610120cd5656b6fc71991415cb50748b9489
        # v2.20.1
        with:
          sarif_file: zizmor_results.sarif
          category: github-actions
        if: ${{ inputs.upload-sarif }}

  checkmake:
    name: Check Makefile
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911
        # v2.13.0
        with:
          disable-sudo-and-containers: ${{ inputs.disable-sudo }}
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            objects.githubusercontent.com:443
            proxy.golang.org:443
            release-assets.githubusercontent.com:443
            storage.googleapis.com:443
            sum.golang.org:443
            ${{ inputs.egress-policy-allowlist }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        # v5.5.0
        with:
          go-version: "oldstable"
          cache: false
      - id: find-files
        run: |
          FILES=$(find . -iname "Makefile" -o -iname "GNUmakefile" -o -iname "*.mk" -o -iname "*.make")
          echo "$FILES" > files_list.txt
          echo "found_files=$FILES" >> $GITHUB_OUTPUT
        shell: bash
      - if: steps.find-files.outputs.found_files != ''
        id: scan-files
        continue-on-error: true
        run: |
          go install github.com/mrtazz/checkmake/cmd/checkmake@latest
          FILES=$(cat files_list.txt | tr '\n' ' ')
          OUTPUT=$(checkmake $FILES --debug || true)
          echo "checkmake_output<<EOF" >> $GITHUB_OUTPUT
          echo "$OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash
      - name: PR comment with findings
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        # v7.0.1
        if: github.event_name == 'pull_request' && steps.scan-files.outputs.checkmake_output != ''
        env:
          OUTPUT: "${{ steps.scan-files.outputs.checkmake_output }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR.
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('üõ†Ô∏è Checkmake findings')
            })

            // 2. Prepare format of the comment
            const output = `#### üõ†Ô∏è Checkmake findings

            <details><summary>Show findings</summary>

            \`\`\`\n
            ${process.env.OUTPUT}
            \`\`\`

            </details>`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
                github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
                })
            } else {
                github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
                })
            }

on:
  workflow_call:
    inputs:
      aws-region:
        type: string
        default: "eu-west-1"
      aws-role:
        type: string
        default: "invalid"
      build-lambda:
        type: boolean
        default: false
      deploy-lambda:
        type: boolean
        default: false
      disable-sudo:
        type: boolean
        default: true
      egress-policy-allowlist:
        type: string
        default: ""
      rust-version:
        type: string
        default: "stable"
      runs-on:
        type: string
        default: "ubuntu-latest"
      working-directory:
        type: string
        default: "."

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e
        # v2.10.4
        with:
          disable-sudo: ${{ inputs.disable-sudo }}
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            index.crates.io:443
            static.crates.io:443
            ${{ inputs.egress-policy-allowlist }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        # v4.2.2
        with:
          persist-credentials: false
      - name: Cargo cache
        uses: swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3
        # v2.7.7
        with:
          cache-on-failure: true
          workspaces: ${{ inputs.working-directory }}
      - name: Build
        run: cargo build --verbose --release

  tests:
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e
        # v2.10.4
        with:
          disable-sudo: ${{ inputs.disable-sudo }}
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            index.crates.io:443
            static.crates.io:443
            ${{ inputs.egress-policy-allowlist }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        # v4.2.2
        with:
          persist-credentials: false
      - name: Cargo cache
        uses: swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3
        # v2.7.7
        with:
          cache-on-failure: true
          workspaces: ${{ inputs.working-directory }}
      - name: Run tests
        run: cargo test --verbose

  clippy:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      actions: read
      contents: read
      security-events: write
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e
        # v2.10.4
        with:
          disable-sudo: ${{ inputs.disable-sudo }}
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            index.crates.io:443
            static.crates.io:443  
            ${{ inputs.egress-policy-allowlist }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        # v4.2.2
        with:
          persist-credentials: false
      - name: Cargo cache
        uses: swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3
        # v2.7.7
        with:
          cache-on-failure: true
          cache-all-crates: true
          workspaces: ${{ inputs.working-directory }}
      - name: Install tools
        run: cargo install cargo-make clippy-sarif sarif-fmt
      - name: Run clippy
        run: >
          cargo make --profile gha clippy
          | clippy-sarif
          | tee clippy-results.sarif
          | sarif-fmt
        continue-on-error: true
      - name: Upload results
        uses: github/codeql-action/upload-sarif@3407610120cd5656b6fc71991415cb50748b9489
        # v2.20.1
        with:
          sarif_file: ${{ inputs.working-directory }}/clippy-results.sarif
          wait-for-processing: true

  build-and-deploy:
    if: ${{ inputs.build-lambda || inputs.deploy-lambda }}
    runs-on: ${{ inputs.runs-on }}
    needs: [build, tests, clippy]
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e
        # v2.10.4
        with:
          disable-sudo: ${{ inputs.disable-sudo }}
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            github.com:443
            index.crates.io:443
            lambda.eu-west-1.amazonaws.com:443
            objects.githubusercontent.com:443
            static.crates.io:443
            sts.eu-west-1.amazonaws.com:443
            ziglang.org:443
            zig.linus.dev:443
            ${{ inputs.egress-policy-allowlist }}
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        # v4.2.2
        with:
          persist-credentials: false
      - uses: aws-actions/configure-aws-credentials@4fc4975a852c8cd99761e2de1f4ba73402e44dd9
        # v4.0.3
        with:
          role-to-assume: ${{ inputs.aws-role }}
          aws-region: ${{ inputs.aws-region }}
          retry-max-attempts: 2
      - name: Install Zig toolchain
        uses: mlugg/setup-zig@a67e68dc5c8281d9608136d3d7ca1b282213e4ac
        # v1.2.1
        with:
          version: latest
          mirror: https://zig.linus.dev/zig
      - name: Install Cargo Lambda
        uses: jaxxstorm/action-install-gh-release@cd6b2b78ad38bdd294341cda064ec0692b06215b
        # v1.14.0
        with:
          repo: cargo-lambda/cargo-lambda
          platform: linux
          arch: x86_64
      - name: Cargo cache
        uses: swatinem/rust-cache@f0deed1e0edfc6a9be95417288c0e1099b1eeec3
        # v2.7.7
        with:
          cache-on-failure: true
          cache-all-crates: true
          workspaces: ${{ inputs.working-directory }}
      - name: Build Lambda
        if: ${{ inputs.build-lambda || inputs.deploy-lambda }}
        run: cargo lambda build --verbose --release
      - name: Deploy Lambda
        if: ${{ inputs.deploy-lambda }}
        run: cargo lambda deploy

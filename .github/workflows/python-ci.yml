on:
  workflow_call:
    inputs:
      disable-sudo:
        type: boolean
        default: true
      egress-policy-allowlist:
        type: string
        default: ''
      poetry-version:
        type: string
        default: 'latest'
      python-version:
        type: string
        default: '3.13'
      runs-on:
        type: string
        default: 'ubuntu-latest'
      working-directory:
        type: string
        default: '.'

jobs:
  install-and-checks:
    permissions: {}
    runs-on: ${{ inputs.runs-on }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          disable-sudo-and-containers: ${{ inputs.disable-sudo }}
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
            files.pythonhosted.org:443
            github.com:443
            install.python-poetry.org:443
            objects.githubusercontent.com:443
            pypi.org:443
            release-assets.githubusercontent.com:443
            ${{ inputs.egress-policy-allowlist }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ inputs.python-version }}

      # ----- Poetry -----
      - uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        if: ${{ hashFiles(format('{0}/poetry.lock', inputs.working-directory)) != '' }}
        with:
          path: ~/.local/bin/
          key: poetry-${{ inputs.poetry-version }}
      - uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        if: ${{ hashFiles(format('{0}/poetry.lock', inputs.working-directory)) != '' }}
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # ----- UV -----
      - uses: astral-sh/setup-uv@3259c6206f993105e3a61b142c2d97bf4b9ef83d # v7.1.0
        if: ${{ hashFiles(format('{0}/uv.lock', inputs.working-directory)) != '' }}
        with:
          enable-cache: true
      - id: cache-deps
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: |
            ${{ inputs.working-directory }}/.venv
            ${{ inputs.working-directory }}/.mypy_cache
            ~/.local/.cache/uv
          key: python-${{ inputs.python-version }}-venv-${{ hashFiles(format('{0}/poetry.lock', inputs.working-directory), format('{0}/uv.lock', inputs.working-directory)) }}
      - run: poetry sync --no-root
        if: ${{ steps.cache-deps.outputs.cache-hit != 'true' && hashFiles(format('{0}/poetry.lock', inputs.working-directory)) != '' }}
      - run: uv sync --locked --all-extras --dev
        if: ${{ steps.cache-deps.outputs.cache-hit != 'true' && hashFiles(format('{0}/uv.lock', inputs.working-directory)) != '' }}
      - name: Install Task
        uses: go-task/setup-task@0ab1b2a65bc55236a3bc64cde78f80e20e8885c2 # v1.0.0
        with:
          repo-token: ${{ github.token }}
      - name: Linting
        run: |
          task format-check
          task lint
      - name: Type checking
        run: |
          task type-check

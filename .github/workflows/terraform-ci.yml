on:
  workflow_call:
    inputs:
      aws-region:
        type: string
        default: "eu-west-1"
      aws-role:
        type: string
        default: ""
      disable-sudo:
        type: boolean
        default: true
      egress-policy-allowlist:
        type: string
        default: ""
      runs-on:
        type: string
        default: "ubuntu-latest"
      sops-encrypted-tfvars:
        type: string
        default: "./terraform.tfvars.enc"
      sops-plaintext-tfvars:
        type: string
        default: "./terraform.tfvars"
      upload-sarif:
        type: boolean
        default: true
      working-directory:
        type: string
        default: "."
    secrets:
      sops-age-key:
        required: false

jobs:
  terraform-lint:
    name: Terraform Linting
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: read
      pull-requests: write
      security-events: write
      id-token: write
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911
        # v2.13.0
        with:
          disable-sudo: ${{ inputs.disable-sudo }}
          egress-policy: audit
          allowed-endpoints: >
            ${{ inputs.egress-policy-allowlist }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        # v5.0.0
        with:
          persist-credentials: false
      - uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        if: ${{ inputs.aws-role != '' }}
        # v4.1.0
        with:
          role-to-assume: ${{ inputs.aws-role }}
          aws-region: ${{ inputs.aws-region }}
          retry-max-attempts: 2
      - run: |
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc
          mkdir -p ~/.terraform.d/plugin-cache
      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-providers-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: terraform-providers-
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        # v3.1.2
      - name: Sops Binary Installer
        uses: mdgreenwald/mozilla-sops-action@d9714e521cbaecdae64a89d2fdd576dd2aa97056
      - name: Decrypt Secrets
        env:
          SOPS_AGE_KEY: ${{ secrets.sops-age-key }}
          ENCRYPTED_FILE: "${{ inputs.sops-encrypted-tfvars }}"
          PLAINTEXT_FILE: "${{ inputs.sops-plaintext-tfvars }}"
        run: |
          sops decrypt "$ENCRYPTED_FILE" --output "$PLAINTEXT_FILE"
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: tflint
        uses: reviewdog/action-tflint@41b4770c9d9e50741c20e431986b33124a07ca52
        # v1.24.2
        with:
          working_directory: ${{ inputs.working-directory }}
          fail_level: any
          filter_mode: nofilter

      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@dc5a429b52fcf669ce959baa2c2dd26090d2a6c4
        # v0.32.0
        with:
          hide-progress: true
          format: sarif
          scan-type: config
          exit-code: "1"
          output: ${{ inputs.working-directory }}/trivy_results.sarif
          github-pat: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload results
        uses: github/codeql-action/upload-sarif@3407610120cd5656b6fc71991415cb50748b9489
        # v2.20.1
        with:
          sarif_file: ${{ inputs.working-directory }}/trivy_results.sarif
          category: devops
        if: ${{ inputs.upload-sarif }}

  terraform-plan:
    name: Terraform Plan
    runs-on: ${{ inputs.runs-on }}
    needs: terraform-lint
    permissions:
      contents: read
      pull-requests: write
      id-token: write
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}
    steps:
      - uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911
        # v2.13.0
        with:
          disable-sudo-and-containers: ${{ inputs.disable-sudo }}
          egress-policy: audit
          allowed-endpoints: >
            ${{ inputs.egress-policy-allowlist }}
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        # v5.0.0
        with:
          persist-credentials: false
      - uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        if: ${{ inputs.aws-role != '' }}
        # v4.1.0
        with:
          role-to-assume: ${{ inputs.aws-role }}
          aws-region: ${{ inputs.aws-region }}
          retry-max-attempts: 2
      - run: |
          echo 'plugin_cache_dir = "$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc
          mkdir -p ~/.terraform.d/plugin-cache
      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-providers-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: terraform-providers-
      - uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        # v3.1.2
      - name: Sops Binary Installer
        uses: mdgreenwald/mozilla-sops-action@d9714e521cbaecdae64a89d2fdd576dd2aa97056
      - name: Decrypt Secrets
        env:
          SOPS_AGE_KEY: ${{ secrets.sops-age-key }}
          ENCRYPTED_FILE: "${{ inputs.sops-encrypted-tfvars }}"
          PLAINTEXT_FILE: "${{ inputs.sops-plaintext-tfvars }}"
        run: |
          sops decrypt "$ENCRYPTED_FILE" --output "$PLAINTEXT_FILE"
      - name: Terraform Init
        id: init
        run: terraform init -input=false
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        # v7.0.1
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
          ACTOR: "${{ github.actor }}"
          EVENT: "${{ github.event_name }}"
          WORKDIR: "${{ inputs.working-directory }}"
          OUTCOME: "${{ steps.plan.outcome }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR.
            const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan ðŸ“–')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Plan ðŸ“–\`${{ env.OUTCOME }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ env.ACTOR }}, Action: \`${{ env.EVENT }}\`, Working Directory: \`${{ env.WORKDIR }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
                github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
                })
            } else {
                github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
                })
            }
